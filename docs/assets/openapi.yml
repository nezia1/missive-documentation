openapi: '3.0.2'
info:
  title: Missive
  version: '1.0'
servers:
  - url: https://missive.nezia.dev/api/v1
security:
  - bearerAuth: []
paths:
  /tokens:
    summary: Represents access and refresh tokens
    description: |
      This resource represents the access and refresh tokens of the user. They allow to handle authentication, as well as authorization.
    post:
      tags:
        - Authentication
      summary: Authenticate the user and provide an access and refresh token
      security: [] # Login route is public
      responses:
        '200':
          description: Successfully authenticated the user
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      accessToken:
                        type: string
                        description: The access JWT that will be passed to subsequent requests
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhMGQ0ZjJmMC0wNGViLTQwM2MtYTgyMS1mMjU5MjcwNWMyYTQiLCJuYW1lIjoiYWxpY2UiLCJjbGFpbXMiOlsicHJvZmlsZTpyZWFkIiwicHJvZmlsZTp3cml0ZSIsInByZWtleXM6cmVhZCIsInByZWtleXM6d3JpdGUiXSwiZXhwIjo5MDAsImlhdCI6MTcxMTYzNzMzMn0.SU7pdrNydxyB2nQK12s0WiELbs80jIIN5D7ELTZao2k
          headers:
            Set-Cookie:
              description: Sets the refresh token as an HTTP only cookie
              schema:
                type: string
                example: refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhMGQ0ZjJmMC0wNGViLTQwM2MtYTgyMS1mMjU5MjcwNWMyYTQiLCJuYW1lIjoiYWxpY2UiLCJleHAiOjMxNTM2MDAwLCJpYXQiOjE3MTE2MzcxMTJ9.zVcObm2Guk23mvLXuuzX7XghdaCobcX7F_-cA7GjwaI; Path=/; HttpOnly
        '401':
          $ref: "#/components/responses/UnauthorizedResponse"
        '202':
          description: The user has enabled 2FA, they will need to login again including their one-time password
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      status:
                        type: string
                        description: A status informing the consumer that TOTP is required
                        example: totp_required
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Refresh access token 
      tags: 
        - Authentication
      parameters:
        - $ref: '#/components/parameters/RefreshCookie'
      security: [] # No security since we're simply checking for the refresh token (the fact that the user has one meant they are logged in)
      
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      accessToken:
                        type: string
                        description: The new access JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhMGQ0ZjJmMC0wNGViLTQwM2MtYTgyMS1mMjU5MjcwNWMyYTQiLCJuYW1lIjoiYWxpY2UiLCJjbGFpbXMiOlsicHJvZmlsZTpyZWFkIiwicHJvZmlsZTp3cml0ZSIsInByZWtleXM6cmVhZCIsInByZWtleXM6d3JpdGUiXSwiaWF0IjoxNzExNjM3MzU2fQ.2QIhzXBKB31TXrf7g1i_VXSMre74kcLXHqG0WJJGyZ8
        '401':
          description: Refresh token missing 
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: Refresh token is missing
        '403':
          description: Refresh token invalid
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: Refresh token is invalid
    delete:
      summary: Revoke a refresh token
      tags: 
        - Authentication
      responses:
        '204':
          description: Refresh token has been successfully revoked
  /users/{id}:
      summary: Represents a user
      description: |
        This represents an individual user.
        Each user is identified by a numeric `id`.
        Users are only able to carry out operations belonging to their own profile. This is handled by the JWT, containing a user id.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID (UUIDv4) of the user 
          example: a0d4f2f0-04eb-403c-a821-f2592705c2a4
      post:
        summary: Create a user account
        description: |
          This route allows the user to sign themselves up. If the process is successful, it will return an access token, alongside a refresh token as a cookie.
        responses:
          '201': 
            description: Account creation successful
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties: false
                  properties:
                    data:
                      additionalProperties: false
                      properties:
                        accessToken:
                          description: The new access JWT
                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhMGQ0ZjJmMC0wNGViLTQwM2MtYTgyMS1mMjU5MjcwNWMyYTQiLCJuYW1lIjoiYWxpY2UiLCJjbGFpbXMiOlsicHJvZmlsZTpyZWFkIiwicHJvZmlsZTp3cml0ZSIsInByZWtleXM6cmVhZCIsInByZWtleXM6d3JpdGUiXSwiZXhwIjo5MDAsImlhdCI6MTcxMTU1MDk1Nn0.iwGGAdIWev-BaZjrFv7H4tRkuxQpNLyHH9Q-PedpCmI
                      
                    
                    
      get:
        summary: Get a user's data 
        description: This route allows to fetch a user's data. You need to be logged in to retrieve any sort of information from this. Additionally, you can only retrieve your own data.
        tags:
            - Users
        security: 
          - bearerAuth: []
        responses:
          '200':
            description: Profile successfully fetched 
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/User"
          '401':
            $ref: "#/components/responses/UnauthorizedResponse"
          '403':
            $ref: "#/components/responses/ForbiddenResponse"
          '404':
            $ref: "#/components/responses/NotFoundResponse"
      delete:
        summary: Delete a user's profile
        description: This route allows a user to delete their profile completely, deleting all keys related to them in the process.
        tags:
          - Users
        responses:
          '204':
             description: User successfully deleted
          '401':
            $ref: "#/components/responses/UnauthorizedResponse"
  /users/{id}/keys:
    summary: Represents the user's public cryptography keys
    description: | 
      This resource represents the entirety of the user's public keys. It contains:
        - Pre keys
        - Signed pre key
    parameters:
      - in: path
        name: id 
        description: Unique ID (UUIDv4) of the user
        schema:
          type: string
        required: true
    get:
      summary:  Fetch pre-keys related to this user
      description: | 
        This route allows the currently authenticated user to retrieve public keys from the app users. It's going to return one regular pre-key, and the signed pre-key. This will also effectively delete the pre-key that was used (the Signal protocol specification requires them to be one-time only).
        Everyone can fetch everybody else's public keys, as long as they're authenticated, but only the user owning the signed public pre-key can update it.
      tags:
       - Users 
      responses:
        '200':
          description: Public pre-keys successfully fetched
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                    $ref: "#/components/schemas/PreKeys"
        '401':
          $ref: "#/components/responses/UnauthorizedResponse"
    patch:
      summary: Update the signed pre-key
      description: This allows the user to update their own signed pre-key. It is recommended that this is updated at least once a month.
      tags:
        - Users
      responses:
        '204':
          description: Signed public pre-key successfully updated
        '401':
          $ref: "#/components/responses/UnauthorizedResponse"
        '403':
          $ref: "#/components/responses/ForbiddenResponse"
  /users/{id}/messages:
    summary: Represents the user's temporary messages
    description: |
      This resource represents the user's temporary messages.
      They are only accessible if the user it belongs to is authenticated, and are to be automatically deleted after being successfully received.
    get:
      summary: Fetches all pending temporary messages
      description: | 
        This route gets all temporary messages in ordered to be processed by the client. The messages should be deleted after being fetched, or at least marked as received in order for the database / server to automatically clean up.
      tags: 
        - Temporary messages
      responses:
        '200':
          description: Messages successfully received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemporaryMessages"
        '401':
          $ref: "#/components/responses/UnauthorizedResponse"
        '403':
          $ref: "#/components/responses/ForbiddenResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A JWT authentication flow, requiring an access token generated by the POST /tokens route containing:
        - the user's unique ID
        - the scope they have access to 
  schemas:
    User:
      type: object
      additionalProperties: false
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique id of the user
          example: a0d4f2f0-04eb-403c-a821-f2592705c2a4
        name:
          type: string
          description: The unique user's username
          example: alice
    Error:
      type: object
      additionalProperties: false
      properties:
        error:
          type: string
          description: A message describing the error in a human-readable format
    UnsignedPreKey:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: Public key id
        key:
          type: string
          description: Public key
    SignedPreKey:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/UnsignedPreKey"
      properties:
       signature:
        type: string
        description: The pre key's signature
    PreKeys:
      type: object
      additionalProperties: false
      properties:
        preKey: 
          type: object
          properties:
            $ref: "#/components/schemas/UnsignedPreKey"
        signedPreKey:
          type: object
          properties:
          $ref: "#/components/schemas/SignedPreKey"
    TemporaryMessage: 
      type: object
      properties:
        id:
          type: string
          example: a3461864-2829-44b0-ae9e-79c83837cc0d
          description: The identifier of the message
        sender:
          type: string
          example: a0d4f2f0-04eb-403c-a821-f2592705c2a4
          description: The identifier of the sender
        content:
          type: string
          example: encrypted-message
          description: The encrypted content of the message
        sentAt: 
          type: string
          format: date-time
          example: 1711637404
          description: The date and time when the message was sent
    TemporaryMessages:
      properties:
        messages: 
          type: array
          items:
            $ref: "#/components/schemas/TemporaryMessage"
  parameters:
    RefreshCookie:
      required: true
      in: cookie
      name: refreshToken
      description: The refresh token used to authenticate and refresh the access token
      schema:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhMGQ0ZjJmMC0wNGViLTQwM2MtYTgyMS1mMjU5MjcwNWMyYTQiLCJuYW1lIjoiYWxpY2UiLCJleHAiOjMxNTM2MDAwLCJpYXQiOjE3MTE2MzcxMTJ9.zVcObm2Guk23mvLXuuzX7XghdaCobcX7F_-cA7GjwaI
  responses:
    UnauthorizedResponse:
      description: Authentication is required and has failed or is missing
      content:
        application/json:
          schema:
            type: object
            properties:
            $ref: "#/components/schemas/Error"
          example:
                error: "User is not authenticated"
    ForbiddenResponse:
      description: Authentication has succeeded but user is not allowed to access resource
      content:
        application/json:
          schema:
            type: object
            properties:
            $ref: "#/components/schemas/Error"
          example:
                error: "User does not have permission to access resource"
    NotFoundResponse:
      description: Resource has not been found
      content:
        application/json:
          schema:
            type: object
            properties:
            $ref: "#/components/schemas/Error"
          example:
                error: "The resource you are trying to access has not been found"
