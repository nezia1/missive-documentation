openapi: '3.0.2'
info:
  title: Missive
  version: '1.0'
servers:
  - url: https://missive.nezia.dev/api/v1
security:
  - bearerAuth: []
paths:
  /tokens:
    summary: Represents access and refresh tokens
    description: |
      This resource represents the access and refresh tokens of the user. They allow to handle authentication, as well as authorization.
    post:
      summary: Authenticate the user and provide an access and refresh token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully authenticated the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    properties:
                      accessToken:
                        type: string
                        description: The access JWT that will be passed to subsequent requests
          headers:
            Set-Cookie:
              description: Sets the refresh token as an HTTP only cookie
              schema:
                type: string
                example: refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyLWlkIiwibmFtZSI6IkFsaWNlIiwiaWF0IjoxNTE2MjM5MDIyfQ.MBcZYxbqmQX5lajIHrD87pA5yY6EqfRWLiugHDMxY40; Path=/; HttpOnly
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '202':
          description: The user has enabled 2FA, they will need to login again including their one-time password
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      status:
                        type: string
                        description: A status informing the consumer that TOTP is required
                        example: totp_required
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Refresh access token 
      parameters:
        - $ref: '#/components/parameters/RefreshCookie'
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      accessToken:
                        type: string
    delete:
      summary: Revoke a refresh token
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Refresh token has been successfully revoked
  /users/{id}:
      summary: Represents a user
      description: |
        This represents an individual user.
        Each user is identified by a numeric `id`.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID (UUIDv4) of the user 
      get:
        summary: Get a user's data (can only be fetched by the user it belongs to)
        security: 
          - bearerAuth: []
        responses:
          '200':
            description: Profile successfully fetched 
            content:
              application/json:
                schema:
                  properties:
                    data:
                      $ref: "#/components/schemas/User"
          '403':
            description: Lacks permission to fetch profile
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
        

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A JWT authentication flow, requiring an access token generated by the POST /tokens route containing:
        - the user's unique ID
        - the scope they have access to 
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique id of the user
        name:
          type: string
          description: The unique user's username
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error in a human-readable format
  parameters:
    RefreshCookie:
      required: true
      in: cookie
      name: refreshToken
      description: The refresh token used to authenticate and refresh the access token
      schema:
        type: string
